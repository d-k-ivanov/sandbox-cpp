
*** Dumping AST Record Layout
         0 | struct A
         0 |   (A vftable pointer)
         8 |   char x
        12 |   int y
           | [sizeof=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x1f86b3b5658 <1.cpp:1:1, line:6:1> line:1:8 struct A definition
|-DefinitionData polymorphic
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_implicit
| |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x1f86cd5c930 <col:1, col:8> col:8 implicit struct A
|-CXXMethodDecl 0x1f86cd5ca38 <line:3:5, col:20> col:18 f 'void ()' virtual
|-FieldDecl 0x1f86cd5cae8 <line:4:5, col:10> col:10 x 'char'
|-FieldDecl 0x1f86cd5cb58 <line:5:5, col:9> col:9 y 'int'
|-CXXMethodDecl 0x1f86cd5cc08 <line:1:8> col:8 implicit operator= 'A &(const A &)' inline default noexcept-unevaluated 0x1f86cd5cc08
| `-ParmVarDecl 0x1f86cd5cd18 <col:8> col:8 'const A &'
|-CXXMethodDecl 0x1f86cd5cdb8 <col:8> col:8 implicit operator= 'A &(A &&)' inline default noexcept-unevaluated 0x1f86cd5cdb8
| `-ParmVarDecl 0x1f86cd5cec8 <col:8> col:8 'A &&'
`-CXXDestructorDecl 0x1f86cd5cf60 <col:8> col:8 implicit ~A 'void ()' inline default trivial noexcept-unevaluated 0x1f86cd5cf60

Layout: <CGRecordLayout
  LLVMType:%struct.A = type { i32 (...)**, i8, i32 }
  NonVirtualBaseLLVMType:%struct.A = type { i32 (...)**, i8, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct B
         0 |   struct A (primary base)
         0 |     (A vftable pointer)
         8 |     char x
        12 |     int y
        16 |   double z
           | [sizeof=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x1f86cd5d2c0 <1.cpp:12:1, line:16:1> line:12:8 struct B definition
|-DefinitionData polymorphic
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_implicit
| |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial
| `-Destructor simple irrelevant trivial
|-public 'A'
|-CXXRecordDecl 0x1f86cd5d418 <col:1, col:8> col:8 implicit struct B
|-CXXMethodDecl 0x1f86cd5d4f8 <line:14:5, col:20> col:18 f 'void ()' virtual
| `-Overrides: [ 0x1f86cd5ca38 A::f 'void ()' ]
|-FieldDecl 0x1f86cd5d5b0 <line:15:5, col:12> col:12 z 'double'
|-CXXMethodDecl 0x1f86cd5d668 <line:12:8> col:8 implicit operator= 'B &(const B &)' inline default noexcept-unevaluated 0x1f86cd5d668
| `-ParmVarDecl 0x1f86cd5d778 <col:8> col:8 'const B &'
|-CXXMethodDecl 0x1f86cd5d818 <col:8> col:8 implicit operator= 'B &(B &&)' inline default noexcept-unevaluated 0x1f86cd5d818
| `-ParmVarDecl 0x1f86cd7c2b0 <col:8> col:8 'B &&'
`-CXXDestructorDecl 0x1f86cd7c348 <col:8> col:8 implicit ~B 'void ()' inline default trivial noexcept-unevaluated 0x1f86cd7c348

Layout: <CGRecordLayout
  LLVMType:%struct.B = type { %struct.A, double }
  NonVirtualBaseLLVMType:%struct.B = type { %struct.A, double }
  IsZeroInitializable:1
  BitFields:[
]>
